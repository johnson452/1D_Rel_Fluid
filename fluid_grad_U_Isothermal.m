%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Name: Grant Johnson
%Date: 5/17/2023
%Fluid algroithm, V (divergence U)

%Notes:
%-1D
% Fluid Scheme: https://ammar-hakim.org/sj/hancock-muscl.html
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%Update the quanitites Ux, Uy, Uz (t -> t + dt)
function [Ux,Uy,Uz,Vx,Vy,Vz,N,grid] = fluid_grad_U_Isothermal(Ux,Uy,Uz,N,grid)

% Build Q
Q = construct(N, Ux, Uy, Uz);
Nx = grid.Nx;

% TVD Diagnostic
%[grid] = TVD_diagnostic("start",Q(1,:),Q(2,:),Q(3,:),Q(4,:),grid);

%Iterate over the domain
% I = linspace(1,Nx-1,Nx-1); %DEFAULT
R = mod( linspace(1,Nx,Nx), Nx-1) + 1; %mod( linspace(1,Nx,Nx), Nx) + 1; %Good
L = mod( linspace(-1,Nx-2,Nx), Nx-1) + 1; %mod( linspace(-1,Nx-2,Nx), Nx) + 1; %Good

%Reconstruct U(x) (soln) within one cell, also slope dU
dQ = reconstruct(Q,Q(:,L),Q(:,R),grid);

%Update solution, primative variables
%Q_tilde = Q - grid.dt/(2*grid.dx)*AQ(Q,grid).*dQ;
A = AQ(Q,grid);
Q_tilde = zeros(4,grid.Nx);
for i = 1:Nx
    Q_tilde(:,i) = Q(:,i) - grid.dt/(2*grid.dx)*A(:,:,i)*dQ(:,i);
end

%Get edge values (edges_linear)
% Output: (cell edge values) in cell i
% [ i - 1/2 (+), i + 1/2 (-) ]
% Positivity Limiter:
[Q_plus_I, Q_minus_I] = edges_linear(Q_tilde,dQ);
limited_cases = 0;
% Limit for positivity
for i = 1:grid.Nx
    if (Q_plus_I(1,i)<0) || (Q_minus_I(1,i)<0)
        dQ(1,i) = 0.0;
        dQ(2,i) = 0.0;
        dQ(3,i) = 0.0;
        dQ(4,i) = 0.0;
        limited_cases = limited_cases + 1;
    end
end
%fprintf("Limited Cases per iteration: %d\n",limited_cases);
% Recompute Q-tilde
for i = 1:Nx
    Q_tilde(:,i) = Q(:,i) - grid.dt/(2*grid.dx)*A(:,:,i)*dQ(:,i);
end
[Q_plus_I, Q_minus_I] = edges_linear(Q_tilde,dQ);
[Q_plus_R, ~] = edges_linear(Q_tilde(:,R),dQ(:,R));
[~, Q_minus_L] = edges_linear(Q_tilde(:,L),dQ(:,L));

%Update the fluxes
check(grid,A,"A_main");
check(grid,dQ,"dQ_main");
check(grid,Q,"Q_main");
check(grid,Q_tilde,"Q_tilde");
F_R =  Flux(Q_minus_I,Q_plus_R,grid);
F_L = Flux(Q_minus_L,Q_plus_I,grid);

%Compute the updated Q
Q = Q - grid.dt/(grid.dx)*(F_R - F_L);

check(grid,Q,"Q");
check(grid,F_R,"F_R");
check(grid,F_L,"F_L");

% TVD Diagnostic
%[grid] = TVD_diagnostic("end",Q(1,:),Q(2,:),Q(3,:),Q(4,:),grid);

% Destruct Q into it's components
[N, Ux, Uy, Uz] = destruct(grid,Q);

%Save the output
gamma = sqrt(1+(Ux.*Ux + Uy.*Uy + Uz.*Uz)/(grid.c*grid.c));
Vx = Ux./gamma;
Vy = Uy./gamma;
Vz = Uz./gamma;

end


%Locally defined functions for MUSCL-Handcock:


%Construct Q
function [Q] = construct(N, Ux, Uy, Uz)
Q = [N', (N.*Ux)', (N.*Uy)', (N.*Uz)'];
Q = Q';
end


%Destruct Q into N, Ux, Uy, Uz
function [N, Ux, Uy, Uz] = destruct(grid,Q)
N = Q(1,:);
Ux = Q(2,:)./N;
Uy = Q(3,:)./N;
Uz = Q(4,:)./N;
Ux(N==0) = 0;
Uy(N==0) = 0;
Uz(N==0) = 0;
check(grid,N,"N");
check(grid,Ux,"Ux");
check(grid,Uy,"Uy");
check(grid,Uz,"Uz");
end

%Fluxes N
function [Fl] = Flux(QL,QR,grid)

c = grid.c;
[NR, UxR, UyR, UzR] = destruct(grid,QR);
[NL, UxL, UyL, UzL] = destruct(grid,QL);

% compute c for the lax flux
UR2 = ( UxR.^2 + UyR.^2 + UzR.^2 )/(c^2);
UL2 = ( UxL.^2 + UyL.^2 + UzL.^2 )/(c^2);
gammaR = (sqrt(1 + UR2));
gammaL = (sqrt(1 + UL2));
vRx = UxR./gammaR;
vLx = UxL./gammaL;

%Compute fluxes
T = grid.temp;
c = grid.c;

%Allocate the memory
lambda1_L = zeros(grid.Nx,1);
lambda2_L = zeros(grid.Nx,1);
lambda3_L = zeros(grid.Nx,1);
lambda1_R = zeros(grid.Nx,1);
lambda2_R = zeros(grid.Nx,1);
lambda3_R = zeros(grid.Nx,1);

% compute c (sup of the eigenvalues of left and right)
for i = 1:grid.Nx
    Ux = UxL(i);
    Uy = UyL(i);
    Uz = UzL(i);
    gamma = gammaL(i);
    lambda1_L(i) = vLx(i); % Repeated twice
    lambda2_L(i) = (Ux*Uy^2 - T*Ux + Ux*Uz^2 + Ux*c^2 + (T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^3 + Ux*c^2*gamma^2)/(2*c^2*gamma^3);
    lambda3_L(i) = (Ux*Uy^2 - T*Ux + Ux*Uz^2 + Ux*c^2 - (T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^3 + Ux*c^2*gamma^2)/(2*c^2*gamma^3);
    Ux = UxR(i);
    Uy = UyR(i);
    Uz = UzR(i);
    gamma = gammaR(i);
    lambda1_R(i) = vRx(i); % Repeated twice
    lambda2_R(i) = (Ux*Uy^2 - T*Ux + Ux*Uz^2 + Ux*c^2 + (T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^3 + Ux*c^2*gamma^2)/(2*c^2*gamma^3);
    lambda3_R(i) = (Ux*Uy^2 - T*Ux + Ux*Uz^2 + Ux*c^2 - (T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^3 + Ux*c^2*gamma^2)/(2*c^2*gamma^3);
end


%constants
Nx = grid.Nx;
c = zeros(1,Nx);

%Improved approx:
for i = 1:Nx
    eigen_values = [lambda1_L(i),lambda2_L(i),lambda3_L(i),lambda1_R(i),lambda2_R(i),lambda3_R(i)];
    c(i) = sup(abs(eigen_values));
end


%Rusanov Flux F = vxQ
FR = [ NR.*vRx  ; NR.*vRx.*UxR + (NR./gammaR)*T ; NR.*vRx.*UyR  ; NR.*vRx.*UzR ];
FL = [ NL.*vLx  ; NL.*vLx.*UxL + (NL./gammaL)*T ; NL.*vLx.*UyL  ; NL.*vLx.*UzL ];
Fl = (1/2) * ( FR + FL  - c.*( QR - QL ) );

end

%Reconstruction
function [dW] = reconstruct(Wi,Wm,Wp,grid)

%Option:
option = "eigenvector"; %"standard"; %"eigenvector";

%Average Dw
if option == "eigenvector"
    % Reconstruct primative variables
    Q = Wi;

    %Iterate through the grid
    Nx = grid.Nx;
    dW = zeros(size(Q));
    for i = 1:Nx
        [~, Ux, Uy, Uz] = destruct(grid,Q(:,i));


        % Compute eigenvectors time differences
        [L,optL] = left_eigenvector(Ux, Uy, Uz,grid);
        [R,optR] = right_eigenvector(Ux, Uy, Uz,grid);

        %Stop if isreal fails
        if (~isreal(R)) || (~isreal(L))
            fprintf("R/L:-FAILS: Not-Real Soln.\n");
            R = eye(4);
            L = eye(4);
            %D = diagnol_matrix(Ux,Uy,Uz,grid);
            %A = A_single(Ux,Uy,Uz,grid);
        end
    
        %Stop if isnan fails
        if max(max((isnan(R))))
            fprintf("R-FAILS: Nan Soln.\n");
            pause(1000)
        end
    
        %Stop if isfinite fails
        if min(min((isfinite(R)))) == 0
            fprintf("R-FAILS: Inf Soln.\n");
            pause(1000)
        end

        % Verify everything's good
        check(grid,R,"R");
        check(grid,L,"L");

        %Diagnostics
        %RDL = R*D*L;
        %LAR = L*A*R;
        %disp(A - RDL);
        %disp(LAR - D);

        %Compute the differences with the primative vars
        delta_i_minus_1 = L*(Wi(:,i) - Wm(:,i));
        delta_i = L*(Wp(:,i) - Wi(:,i));
        dW(:,i) = R*ave( delta_i, delta_i_minus_1);



        check(grid,dW(:,i),"dW(:,i)");
    end
else %Standard Option
    dW = ave( Wi - Wm, Wp - Wi );
end

end

% Averaging
function [dW] = ave( Wm, Wp )

avg_type = "minmod"; %"zero"; %"minmod_more_diff"; %"minmod"; %"Supebee"; %"standard";
a = Wm; b = Wp;
ab = a.*b;
sz_a = size(a);
dW = zeros(sz_a);

% Standard Averaging
if avg_type == "standard"
    dW = (Wm + Wp)/2;
elseif avg_type == "zero"
    dW = zeros(sz_a);
elseif avg_type == "minmod_more_diff"
    for i = 1:sz_a(1)
        for j = 1:sz_a(2)
            if ab(i,j) > 0
                dW(i,j) = minmod( [(a(i,j) + b(i,j))/2 ,a(i,j), b(i,j)] ); %minmod( [(a(i,j) + b(i,j))/2 , a(i,j), b(i,j)] );
            else
                dW(i,j) = 0;
            end
        end
    end
elseif avg_type == "minmod"
    for i = 1:sz_a(1)
        for j = 1:sz_a(2)
            if ab(i,j) > 0
                dW(i,j) = minmod( [(a(i,j) + b(i,j))/2 , 2*a(i,j), 2*b(i,j)] );
            else
                dW(i,j) = 0;
            end
        end
    end
elseif avg_type == "Supebee"
    for i = 1:sz_a(1)
        for j = 1:sz_a(2)
            if ab(i,j) > 0
                max_v =  maxmod(  [ a(i,j)  , b(i,j)  ] );
                min_v = minmod (  [ 2*a(i,j), 2*b(i,j)] );
                dW(i,j) = minmod( [ max_v   , min_v   ] );
            else
                dW(i,j) = 0;
            end
        end
    end
end


end

% Minmod used for averaging
function [val] = minmod(a)
if (max(a) > 0) && (min(a) >  0)
    val = min(a);
elseif (max(a) < 0) && (min(a) <  0)
    val = max(a);
else
    val = 0;
end
end

%Maxmod used for averaging
function [val] = maxmod(a)
if (max(a) > 0) && (min(a) >  0)
    val = max(a);
elseif (max(a) < 0) && (min(a) <  0)
    val = min(a);
else
    val = 0;
end
end


% Function A(Q)
function [A] = AQ(Q,grid)

%Recover primitive variables
[~, Ux, Uy, Uz] = destruct(grid,Q);

%Definte helper functions
c = grid.c;
c_sq = c^2;
gamma_vec = sqrt(1.0 + (Ux.*Ux + Uy.*Uy + Uz.*Uz)/(c_sq) );
Ux_vec = Ux;
Uy_vec = Uy;
Uz_vec = Uz;

%Assemble A
T = grid.temp;
A = zeros(4,4,grid.Nx);
for i = 1:grid.Nx
    Ux = Ux_vec(i);
    Uy = Uy_vec(i);
    Uz = Uz_vec(i);
    gamma = gamma_vec(i);

    % Select A:
    if abs(Ux) > grid.tolerance && abs(Uy) > grid.tolerance && abs(Uz) > grid.tolerance
        A(:,:,i) = [ [                            (Ux*(Ux^2 + Uy^2 + Uz^2))/(c^2*gamma^3),                        (Uy^2 + Uz^2 + c^2)/(c^2*gamma^3),                 -(Ux*Uy)/(c^2*gamma^3),                 -(Ux*Uz)/(c^2*gamma^3)];...
            [(- Ux^2*c^2 + 2*T*Ux^2 + 2*T*Uy^2 + 2*T*Uz^2 + T*c^2)/(c^2*gamma^3), (Ux*(Uy^2 + Uz^2 + c^2*gamma^2 + c^2 - T))/(c^2*gamma^3),         -(Uy*(Ux^2 + T))/(c^2*gamma^3),         -(Uz*(Ux^2 + T))/(c^2*gamma^3)];...
            [                                                   -(Ux*Uy)/gamma^3,                   (Uy*(Uy^2 + Uz^2 + c^2))/(c^2*gamma^3), (Ux*(Ux^2 + Uz^2 + c^2))/(c^2*gamma^3),              -(Ux*Uy*Uz)/(c^2*gamma^3)];...
            [                                                   -(Ux*Uz)/gamma^3,                   (Uz*(Uy^2 + Uz^2 + c^2))/(c^2*gamma^3),              -(Ux*Uy*Uz)/(c^2*gamma^3), (Ux*(Ux^2 + Uy^2 + c^2))/(c^2*gamma^3)]];
    elseif abs(Uy) <= grid.tolerance && abs(Uz) <= grid.tolerance && abs(Ux) >= grid.tolerance
        A(:,:,i) = [ [                           Ux^3/(c^2*gamma^3),                                  1/gamma^3,        0,        0];...
            [(- Ux^2*c^2 + 2*T*Ux^2 + T*c^2)/(c^2*gamma^3), (Ux*(c^2*gamma^2 + c^2 - T))/(c^2*gamma^3),        0,        0];...
            [                                            0,                                          0, Ux/gamma,        0];...
            [                                            0,                                          0,        0, Ux/gamma]];
    elseif abs(Uy) <= grid.tolerance && abs(Uz) >= grid.tolerance && abs(Ux) >= grid.tolerance
        A(:,:,i) = [ [                        (Ux*(Ux^2 + Uz^2))/(c^2*gamma^3),                        (Uz^2 + c^2)/(c^2*gamma^3),        0,          -(Ux*Uz)/(c^2*gamma^3)];...
            [(- Ux^2*c^2 + 2*T*Ux^2 + 2*T*Uz^2 + T*c^2)/(c^2*gamma^3), (Ux*(Uz^2 + c^2*gamma^2 + c^2 - T))/(c^2*gamma^3),        0,  -(Uz*(Ux^2 + T))/(c^2*gamma^3)];...
            [                                                       0,                                                 0, Ux/gamma,                               0];...
            [                                        -(Ux*Uz)/gamma^3,                   (Uz*(Uz^2 + c^2))/(c^2*gamma^3),        0, (Ux*(Ux^2 + c^2))/(c^2*gamma^3)]];
    elseif abs(Uz) <= grid.tolerance && abs(Uy) >= grid.tolerance && abs(Ux) >= grid.tolerance      
        A(:,:,i) = [ [                        (Ux*(Ux^2 + Uy^2))/(c^2*gamma^3),                        (Uy^2 + c^2)/(c^2*gamma^3),          -(Ux*Uy)/(c^2*gamma^3),        0];...
            [(- Ux^2*c^2 + 2*T*Ux^2 + 2*T*Uy^2 + T*c^2)/(c^2*gamma^3), (Ux*(Uy^2 + c^2*gamma^2 + c^2 - T))/(c^2*gamma^3),  -(Uy*(Ux^2 + T))/(c^2*gamma^3),        0];...
            [                                        -(Ux*Uy)/gamma^3,                   (Uy*(Uy^2 + c^2))/(c^2*gamma^3), (Ux*(Ux^2 + c^2))/(c^2*gamma^3),        0];...
            [                                                       0,                                                 0,                               0, Ux/gamma]];
    elseif abs(Ux) <= grid.tolerance && abs(Uy) >= grid.tolerance && abs(Uz) <= grid.tolerance
        A(:,:,i) = [ [                                     0,  1/gamma,                     0, 0];...
            [(T*(Uy^2 + gamma^2*c^2))/(c^2*gamma^3),        0, -(T*Uy)/(c^2*gamma^3), 0];...
            [                                     0, Uy/gamma,                     0, 0];...
            [                                     0,        0,                     0, 0]];
    elseif abs(Ux) <= grid.tolerance && abs(Uy) <= grid.tolerance && abs(Uz) <= grid.tolerance
        A(:,:,i) = [[0, 1, 0, 0];...
            [T, 0, 0, 0];...
            [0, 0, 0, 0];...
            [0, 0, 0, 0]];
    else
        fprintf("Error, no R/L Selected!\n");
        pause(1000)
    end
    check(grid,A,"A");
end

end

% Left eigenvectors (Matrix form)
function [L,opt] = left_eigenvector(Ux,Uy,Uz, grid)
c = grid.c;
gamma = sqrt(1 + (Ux*Ux+Uy*Uy+Uz*Uz)/(c*c));
T = grid.temp;

% Select L:
if abs(Ux) > grid.tolerance && abs(Uy) > grid.tolerance && abs(Uz) > grid.tolerance
y*(2*T*Ux^2*Uy^2 - Ux^2*Uy^2*c^2 - Ux^4*c^2 - Ux^2*Uz^2*c^2 + 2*T*Ux^2*Uz^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + 2*T*Uy^4 + 4*T*Uy^2*Uz^2 + 3*T*Uy^2*c^2 + 2*T*Uz^4 + 3*T*Uz^2*c^2 + T*c^4))/((Uy^2 + Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*cx^2*Uy^2 - Ux^4*c^2 - Ux^2*Uy^2*Uz^2 - Ux^2*Uy^2*c^2 - Ux^4*Uz^2 - Ux^2*Uz^4 + Ux^2*Uz^2*c^2*gamma^2 - 2*Ux^2*Uz^2*c^2 + T*Ux^2*Uz^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + 2*T*Uy^4 + 3*T*Uy^2*Uz^2 + 3*T*Uy^2*c^2 + T*Uz^4 + 2*T*Uz^2*c^2 + T*c^4)/((Uy^2 + Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*cy*Uz*(Ux^4 + Ux^2*Uy^2 + Ux^2*Uz^2 - Ux^2*c^2*gamma^2 + Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*c^2))/((Uy^2 + Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*c^2))];...
z*(2*T*Ux^2*Uy^2 - Ux^2*Uy^2*c^2 - Ux^4*c^2 - Ux^2*Uz^2*c^2 + 2*T*Ux^2*Uz^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + 2*T*Uy^4 + 4*T*Uy^2*Uz^2 + 3*T*Uy^2*c^2 + 2*T*Uz^4 + 3*T*Uz^2*c^2 + T*c^4))/((Uy^2 + Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*c^2)),                                                                                                                                                                                                                                                                                                                                                                                                                                                                          0,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (Uy*Uz*(Ux^4 + Ux^2*Uy^2 + Ux^2*Uz^2 - Ux^2*c^2*gamma^2 + Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*c^2))/((Uy^2 + Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*cx^2*Uy^2*c^2*gamma^2 - Ux^4*c^2 - Ux^2*Uy^4 - Ux^2*Uy^2*Uz^2 - Ux^4*Uy^2 - 2*Ux^2*Uy^2*c^2 + T*Ux^2*Uy^2 - Ux^2*Uz^2*c^2 + 2*T*Ux^2*Uz^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + T*Uy^4 + 3*T*Uy^2*Uz^2 + 2*T*Uy^2*c^2 + 2*T*Uz^4 + 3*T*Uz^2*c^2 + T*c^4)/((Uy^2 + Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*c^2))];...
    [ (2*T*Uz^5*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 2*T^2*Ux*Uz^5 + 4*T*Ux^3*Uz^5 + 2*T*Ux^5*Uz^3 + Ux^3*Uz*c^6 - Ux^7*Uz*c^2 + 2*T^2*Ux^3*Uz^3 + 2*Ux^3*Uz^3*c^4 + Ux^3*Uz^5*c^2 + 2*T*Ux*Uz^7 + 2*T*Ux*Uy^6*Uz - T*Ux*Uz*c^6 - Ux^2*Uz^3*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 2*Ux^3*Uy^2*Uz^3*c^2 + 2*T*Uy^4*Uz*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T*Uz*c^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 2*T^2*Ux*Uy^4*Uz + 6*T*Ux*Uy^2*Uz^5 + 6*T*Ux*Uy^4*Uz^3 + 4*T*Ux^3*Uy^4*Uz + 2*T*Ux^5*Uy^2*Uz + T^2*Ux*Uz*c^4 + 3*T*Ux*Uz^5*c^2 - T*Ux^3*Uz*c^4 + 2*T*Ux^2*Uz^3*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 4*T*Uy^2*Uz^3*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 3*T*Uz^3*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux^2*Uz*c^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux^4*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 4*T^2*Ux*Uy^2*Uz^3 + 2*T^2*Ux^3*Uy^2*Uz + 8*T*Ux^3*Uy^2*Uz^3 + 3*T^2*Ux*Uz^3*c^2 + T^2*Ux^3*Uz*c^2 + 3*T*Ux^3*Uz^3*c^2 + 2*Ux^3*Uy^2*Uz*c^4 + Ux^3*Uy^4*Uz*c^2 + 2*Ux^5*Uz*c^4*gamma^2 - Ux^3*Uz*c^6*gamma^4 + 2*T*Ux^2*Uy^2*Uz*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T*Ux^2*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 3*T*Uy^2*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 3*T^2*Ux*Uy^2*Uz*c^2 + 6*T*Ux*Uy^2*Uz^3*c^2 + 3*T*Ux^3*Uy^2*Uz*c^2 - 3*T*Ux*Uz^3*c^4*gamma^2 - 2*T*Ux*Uz^5*c^2*gamma^2 - Ux^2*Uy^2*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^2*Uz*c^4*gamma^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 2*T*Ux^3*Uz^3*c^2*gamma^2 + 3*T*Ux*Uy^4*Uz*c^2 - T*Ux*Uz*c^6*gamma^2 - 3*T*Ux*Uy^2*Uz*c^4*gamma^2 - 2*T*Ux*Uy^4*Uz*c^2*gamma^2 - 4*T*Ux*Uy^2*Uz^3*c^2*gamma^2 - 2*T*Ux^3*Uy^2*Uz*c^2*gamma^2)/(2*(Uy^2 + Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*c^2)*(2*T*Ux^4 + 4*T*Uy^4 + 4*T*Uz^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uy^4 - 2*Ux^4*Uy^2 - 3*Ux^2*Uz^4 - 2*Ux^4*Uz^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 + 8*T*Uy^2*Uz^2 + 6*T*Ux^2*c^2 + 8*T*Uy^2*c^2 + 8*T*Uz^2*c^2 - 6*Ux^2*Uy^2*Uz^2 - 6*Ux^2*Uy^2*c^2 - 6*Ux^2*Uz^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uy^2*c^2*gamma^2 + 2*Ux^2*Uz^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2)),  (Uz*(Uy^2 + Uz^2 + c^2))/(2*T*Ux^4 + 4*T*Uy^4 + 4*T*Uz^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uy^4 - 2*Ux^4*Uy^2 - 3*Ux^2*Uz^4 - 2*Ux^4*Uz^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 + 8*T*Uy^2*Uz^2 + 6*T*Ux^2*c^2 + 8*T*Uy^2*c^2 + 8*T*Uz^2*c^2 - 6*Ux^2*Uy^2*Uz^2 - 6*Ux^2*Uy^2*c^2 - 6*Ux^2*Uz^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uy^2*c^2*gamma^2 + 2*Ux^2*Uz^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2), -(Ux^7*Uy*Uz - Ux^3*Uy^5*Uz - 2*Ux^3*Uy^3*Uz^3 - Ux^3*Uy*Uz^5 + 3*T*Ux*Uy*Uz^5 + 3*T*Ux*Uy^5*Uz + 2*T*Ux^5*Uy*Uz + T*Uy*Uz^3*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T*Uy^3*Uz*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^4*Uy*Uz*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T^2*Ux*Uy*Uz^3 + T^2*Ux*Uy^3*Uz + T^2*Ux^3*Uy*Uz + 6*T*Ux*Uy^3*Uz^3 + 5*T*Ux^3*Uy*Uz^3 + 5*T*Ux^3*Uy^3*Uz - Ux^3*Uy*Uz*c^4 + Ux^2*Uy*Uz^3*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^2*Uy^3*Uz*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 2*Ux^3*Uy*Uz^3*c^2 - 2*Ux^3*Uy^3*Uz*c^2 + Ux^2*Uy*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 2*Ux^5*Uy*Uz*c^2*gamma^2 + Ux^3*Uy*Uz*c^4*gamma^4 + 3*T*Ux*Uy*Uz*c^4 + T*Ux^2*Uy*Uz*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T*Uy*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T^2*Ux*Uy*Uz*c^2 + 6*T*Ux*Uy*Uz^3*c^2 + 6*T*Ux*Uy^3*Uz*c^2 + 5*T*Ux^3*Uy*Uz*c^2 - T*Ux*Uy*Uz*c^4*gamma^2 - T*Ux*Uy*Uz^3*c^2*gamma^2 - T*Ux*Uy^3*Uz*c^2*gamma^2 - 2*T*Ux^3*Uy*Uz*c^2*gamma^2 - Ux^2*Uy*Uz*c^2*gamma^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2))/(2*(Uy^2 + Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*c^2)*(2*T*Ux^4 + 4*T*Uy^4 + 4*T*Uz^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uy^4 - 2*Ux^4*Uy^2 - 3*Ux^2*Uz^4 - 2*Ux^4*Uz^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 + 8*T*Uy^2*Uz^2 + 6*T*Ux^2*c^2 + 8*T*Uy^2*c^2 + 8*T*Uz^2*c^2 - 6*Ux^2*Uy^2*Uz^2 - 6*Ux^2*Uy^2*c^2 - 6*Ux^2*Uz^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uy^2*c^2*gamma^2 + 2*Ux^2*Uz^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2)), -(Ux^7*Uz^2 - Ux^3*Uz^6 + T*Uz^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T^2*Ux*Uz^4 + 5*T*Ux^3*Uz^4 + 2*T*Ux^5*Uz^2 + Ux^2*Uz^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^4*Uz^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T^2*Ux^3*Uz^2 - 2*Ux^3*Uy^2*Uz^4 - Ux^3*Uy^4*Uz^2 - Ux^3*Uz^2*c^4 - 2*Ux^3*Uz^4*c^2 + 3*T*Ux*Uz^6 + Ux^2*Uy^2*Uz^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^2*Uz^2*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 2*Ux^3*Uy^2*Uz^2*c^2 - 2*Ux^5*Uz^2*c^2*gamma^2 + Ux^3*Uz^2*c^4*gamma^4 + 6*T*Ux*Uy^2*Uz^4 + 3*T*Ux*Uy^4*Uz^2 + 3*T*Ux*Uz^2*c^4 + 6*T*Ux*Uz^4*c^2 + T*Ux^2*Uz^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T*Uy^2*Uz^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T*Uz^2*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T^2*Ux*Uy^2*Uz^2 + 5*T*Ux^3*Uy^2*Uz^2 + T^2*Ux*Uz^2*c^2 + 5*T*Ux^3*Uz^2*c^2 + 6*T*Ux*Uy^2*Uz^2*c^2 - T*Ux*Uz^2*c^4*gamma^2 - T*Ux*Uz^4*c^2*gamma^2 - 2*T*Ux^3*Uz^2*c^2*gamma^2 - Ux^2*Uz^2*c^2*gamma^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T*Ux*Uy^2*Uz^2*c^2*gamma^2)/(2*(Uy^2 + Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*c^2)*(2*T*Ux^4 + 4*T*Uy^4 + 4*T*Uz^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uy^4 - 2*Ux^4*Uy^2 - 3*Ux^2*Uz^4 - 2*Ux^4*Uz^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 + 8*T*Uy^2*Uz^2 + 6*T*Ux^2*c^2 + 8*T*Uy^2*c^2 + 8*T*Uz^2*c^2 - 6*Ux^2*Uy^2*Uz^2 - 6*Ux^2*Uy^2*c^2 - 6*Ux^2*Uz^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uy^2*c^2*gamma^2 + 2*Ux^2*Uz^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2))];...
    [-(2*T^2*Ux*Uz^5 - 2*T*Uz^5*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 4*T*Ux^3*Uz^5 + 2*T*Ux^5*Uz^3 + Ux^3*Uz*c^6 - Ux^7*Uz*c^2 + 2*T^2*Ux^3*Uz^3 + 2*Ux^3*Uz^3*c^4 + Ux^3*Uz^5*c^2 + 2*T*Ux*Uz^7 + 2*T*Ux*Uy^6*Uz - T*Ux*Uz*c^6 + Ux^2*Uz^3*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 2*Ux^3*Uy^2*Uz^3*c^2 - 2*T*Uy^4*Uz*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T*Uz*c^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 2*T^2*Ux*Uy^4*Uz + 6*T*Ux*Uy^2*Uz^5 + 6*T*Ux*Uy^4*Uz^3 + 4*T*Ux^3*Uy^4*Uz + 2*T*Ux^5*Uy^2*Uz + T^2*Ux*Uz*c^4 + 3*T*Ux*Uz^5*c^2 - T*Ux^3*Uz*c^4 - 2*T*Ux^2*Uz^3*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 4*T*Uy^2*Uz^3*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 3*T*Uz^3*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^2*Uz*c^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^4*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 4*T^2*Ux*Uy^2*Uz^3 + 2*T^2*Ux^3*Uy^2*Uz + 8*T*Ux^3*Uy^2*Uz^3 + 3*T^2*Ux*Uz^3*c^2 + T^2*Ux^3*Uz*c^2 + 3*T*Ux^3*Uz^3*c^2 + 2*Ux^3*Uy^2*Uz*c^4 + Ux^3*Uy^4*Uz*c^2 + 2*Ux^5*Uz*c^4*gamma^2 - Ux^3*Uz*c^6*gamma^4 - 2*T*Ux^2*Uy^2*Uz*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T*Ux^2*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 3*T*Uy^2*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 3*T^2*Ux*Uy^2*Uz*c^2 + 6*T*Ux*Uy^2*Uz^3*c^2 + 3*T*Ux^3*Uy^2*Uz*c^2 - 3*T*Ux*Uz^3*c^4*gamma^2 - 2*T*Ux*Uz^5*c^2*gamma^2 + Ux^2*Uy^2*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux^2*Uz*c^4*gamma^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 2*T*Ux^3*Uz^3*c^2*gamma^2 + 3*T*Ux*Uy^4*Uz*c^2 - T*Ux*Uz*c^6*gamma^2 - 3*T*Ux*Uy^2*Uz*c^4*gamma^2 - 2*T*Ux*Uy^4*Uz*c^2*gamma^2 - 4*T*Ux*Uy^2*Uz^3*c^2*gamma^2 - 2*T*Ux^3*Uy^2*Uz*c^2*gamma^2)/(2*(Uy^2 + Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*c^2)*(2*T*Ux^4 + 4*T*Uy^4 + 4*T*Uz^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uy^4 - 2*Ux^4*Uy^2 - 3*Ux^2*Uz^4 - 2*Ux^4*Uz^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 + 8*T*Uy^2*Uz^2 + 6*T*Ux^2*c^2 + 8*T*Uy^2*c^2 + 8*T*Uz^2*c^2 - 6*Ux^2*Uy^2*Uz^2 - 6*Ux^2*Uy^2*c^2 - 6*Ux^2*Uz^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uy^2*c^2*gamma^2 + 2*Ux^2*Uz^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2)), -(Uz*(Uy^2 + Uz^2 + c^2))/(2*T*Ux^4 + 4*T*Uy^4 + 4*T*Uz^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uy^4 - 2*Ux^4*Uy^2 - 3*Ux^2*Uz^4 - 2*Ux^4*Uz^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 + 8*T*Uy^2*Uz^2 + 6*T*Ux^2*c^2 + 8*T*Uy^2*c^2 + 8*T*Uz^2*c^2 - 6*Ux^2*Uy^2*Uz^2 - 6*Ux^2*Uy^2*c^2 - 6*Ux^2*Uz^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uy^2*c^2*gamma^2 + 2*Ux^2*Uz^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2), -(Ux^3*Uy*Uz^5 + Ux^3*Uy^5*Uz + 2*Ux^3*Uy^3*Uz^3 - Ux^7*Uy*Uz - 3*T*Ux*Uy*Uz^5 - 3*T*Ux*Uy^5*Uz - 2*T*Ux^5*Uy*Uz + T*Uy*Uz^3*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T*Uy^3*Uz*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^4*Uy*Uz*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T^2*Ux*Uy*Uz^3 - T^2*Ux*Uy^3*Uz - T^2*Ux^3*Uy*Uz - 6*T*Ux*Uy^3*Uz^3 - 5*T*Ux^3*Uy*Uz^3 - 5*T*Ux^3*Uy^3*Uz + Ux^3*Uy*Uz*c^4 + Ux^2*Uy*Uz^3*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^2*Uy^3*Uz*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 2*Ux^3*Uy*Uz^3*c^2 + 2*Ux^3*Uy^3*Uz*c^2 + Ux^2*Uy*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 2*Ux^5*Uy*Uz*c^2*gamma^2 - Ux^3*Uy*Uz*c^4*gamma^4 - 3*T*Ux*Uy*Uz*c^4 + T*Ux^2*Uy*Uz*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T*Uy*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T^2*Ux*Uy*Uz*c^2 - 6*T*Ux*Uy*Uz^3*c^2 - 6*T*Ux*Uy^3*Uz*c^2 - 5*T*Ux^3*Uy*Uz*c^2 + T*Ux*Uy*Uz*c^4*gamma^2 + T*Ux*Uy*Uz^3*c^2*gamma^2 + T*Ux*Uy^3*Uz*c^2*gamma^2 + 2*T*Ux^3*Uy*Uz*c^2*gamma^2 - Ux^2*Uy*Uz*c^2*gamma^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2))/(2*(Uy^2 + Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*c^2)*(2*T*Ux^4 + 4*T*Uy^4 + 4*T*Uz^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uy^4 - 2*Ux^4*Uy^2 - 3*Ux^2*Uz^4 - 2*Ux^4*Uz^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 + 8*T*Uy^2*Uz^2 + 6*T*Ux^2*c^2 + 8*T*Uy^2*c^2 + 8*T*Uz^2*c^2 - 6*Ux^2*Uy^2*Uz^2 - 6*Ux^2*Uy^2*c^2 - 6*Ux^2*Uz^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uy^2*c^2*gamma^2 + 2*Ux^2*Uz^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2)), -(Ux^3*Uz^6 - Ux^7*Uz^2 + T*Uz^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T^2*Ux*Uz^4 - 5*T*Ux^3*Uz^4 - 2*T*Ux^5*Uz^2 + Ux^2*Uz^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^4*Uz^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T^2*Ux^3*Uz^2 + 2*Ux^3*Uy^2*Uz^4 + Ux^3*Uy^4*Uz^2 + Ux^3*Uz^2*c^4 + 2*Ux^3*Uz^4*c^2 - 3*T*Ux*Uz^6 + Ux^2*Uy^2*Uz^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^2*Uz^2*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 2*Ux^3*Uy^2*Uz^2*c^2 + 2*Ux^5*Uz^2*c^2*gamma^2 - Ux^3*Uz^2*c^4*gamma^4 - 6*T*Ux*Uy^2*Uz^4 - 3*T*Ux*Uy^4*Uz^2 - 3*T*Ux*Uz^2*c^4 - 6*T*Ux*Uz^4*c^2 + T*Ux^2*Uz^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T*Uy^2*Uz^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T*Uz^2*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T^2*Ux*Uy^2*Uz^2 - 5*T*Ux^3*Uy^2*Uz^2 - T^2*Ux*Uz^2*c^2 - 5*T*Ux^3*Uz^2*c^2 - 6*T*Ux*Uy^2*Uz^2*c^2 + T*Ux*Uz^2*c^4*gamma^2 + T*Ux*Uz^4*c^2*gamma^2 + 2*T*Ux^3*Uz^2*c^2*gamma^2 - Ux^2*Uz^2*c^2*gamma^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T*Ux*Uy^2*Uz^2*c^2*gamma^2)/(2*(Uy^2 + Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*c^2)*(2*T*Ux^4 + 4*T*Uy^4 + 4*T*Uz^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uy^4 - 2*Ux^4*Uy^2 - 3*Ux^2*Uz^4 - 2*Ux^4*Uz^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 + 8*T*Uy^2*Uz^2 + 6*T*Ux^2*c^2 + 8*T*Uy^2*c^2 + 8*T*Uz^2*c^2 - 6*Ux^2*Uy^2*Uz^2 - 6*Ux^2*Uy^2*c^2 - 6*Ux^2*Uz^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uy^2*c^2*gamma^2 + 2*Ux^2*Uz^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2))]];
    opt = "None Zero";
elseif abs(Uy) <= grid.tolerance && abs(Uz) <= grid.tolerance && abs(Ux) >= grid.tolerance


        [ (- Ux^2*c^2 + 2*T*Ux^2 + T*c^2)/(2*T*Ux^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 - 2*T*Ux^2*c^2*gamma^2)^(1/2), (Ux*c^2 - T*Ux - Ux^3 + (T^2*Ux^2 + 2*T*Ux^4 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux*c^2*gamma^2)/(2*(2*T*Ux^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 - 2*T*Ux^2*c^2*gamma^2)^(1/2)), 0, 0];...
        [-(- Ux^2*c^2 + 2*T*Ux^2 + T*c^2)/(2*T*Ux^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 - 2*T*Ux^2*c^2*gamma^2)^(1/2), (T*Ux - Ux*c^2 + Ux^3 + (T^2*Ux^2 + 2*T*Ux^4 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux*c^2*gamma^2)/(2*(2*T*Ux^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 - 2*T*Ux^2*c^2*gamma^2)^(1/2)), 0, 0]];
    opt = "Uy Uz Zero";
elseif abs(Uy) <= grid.tolerance && abs(Uz) >= grid.tolerance && abs(Ux) >= grid.tolerance
    L = [[                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      0,                                                                                                                                                                                                                                                                                                              0, 1,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              0];...
z*(2*T*Ux^2*Uz^2 - Ux^2*Uz^2*c^2 - Ux^4*c^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + 2*T*Uz^4 + 3*T*Uz^2*c^2 + T*c^4))/((Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uz^2 + T*cx^2*Uz^2 - Ux^2*Uz^2*c^2 - Ux^4*c^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + 2*T*Uz^4 + 3*T*Uz^2*c^2 + T*c^4)/((Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uz^2 + T*c^2))];...
        [ (2*T^2*Ux*Uz^5 + 4*T*Ux^3*Uz^5 + 2*T*Ux^5*Uz^3 + Ux^3*Uz*c^6 - Ux^7*Uz*c^2 + 2*T*Uz^5*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 2*T^2*Ux^3*Uz^3 + 2*Ux^3*Uz^3*c^4 + Ux^3*Uz^5*c^2 + 2*T*Ux*Uz^7 + 3*T*Uz^3*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux^2*Uz*c^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux^4*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T*Ux*Uz*c^6 - Ux^2*Uz^3*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T^2*Ux*Uz*c^4 + 3*T*Ux*Uz^5*c^2 - T*Ux^3*Uz*c^4 + T*Uz*c^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 3*T^2*Ux*Uz^3*c^2 + T^2*Ux^3*Uz*c^2 + 3*T*Ux^3*Uz^3*c^2 + 2*Ux^5*Uz*c^4*gamma^2 - Ux^3*Uz*c^6*gamma^4 + 2*T*Ux^2*Uz^3*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 3*T*Ux*Uz^3*c^4*gamma^2 - 2*T*Ux*Uz^5*c^2*gamma^2 + T*Ux^2*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 2*T*Ux^3*Uz^3*c^2*gamma^2 + Ux^2*Uz*c^4*gamma^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T*Ux*Uz*c^6*gamma^2)/(2*(Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uz^2 + T*c^2)*(2*T*Ux^4 + 4*T*Uz^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uz^4 - 2*Ux^4*Uz^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uz^2 + 6*T*Ux^2*c^2 + 8*T*Uz^2*c^2 - 6*Ux^2*Uz^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2)),  (Uz*(Uz^2 + c^2))/(2*T*Ux^4 + 4*T*Uz^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uz^4 - 2*Ux^4*Uz^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uz^2 + 6*T*Ux^2*c^2 + 8*T*Uz^2*c^2 - 6*Ux^2*Uz^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2), 0, -(Ux^7*Uz^2 - Ux^3*Uz^6 + T^2*Ux*Uz^4 + 5*T*Ux^3*Uz^4 + 2*T*Ux^5*Uz^2 + T*Uz^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T^2*Ux^3*Uz^2 - Ux^3*Uz^2*c^4 - 2*Ux^3*Uz^4*c^2 + Ux^2*Uz^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^4*Uz^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 3*T*Ux*Uz^6 + T*Uz^2*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 2*Ux^5*Uz^2*c^2*gamma^2 + Ux^3*Uz^2*c^4*gamma^4 + Ux^2*Uz^2*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 3*T*Ux*Uz^2*c^4 + 6*T*Ux*Uz^4*c^2 + T^2*Ux*Uz^2*c^2 + 5*T*Ux^3*Uz^2*c^2 + T*Ux^2*Uz^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux^2*Uz^2*c^2*gamma^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T*Ux*Uz^2*c^4*gamma^2 - T*Ux*Uz^4*c^2*gamma^2 - 2*T*Ux^3*Uz^2*c^2*gamma^2)/(2*(Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uz^2 + T*c^2)*(2*T*Ux^4 + 4*T*Uz^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uz^4 - 2*Ux^4*Uz^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uz^2 + 6*T*Ux^2*c^2 + 8*T*Uz^2*c^2 - 6*Ux^2*Uz^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2))];...
        [-(2*T^2*Ux*Uz^5 + 4*T*Ux^3*Uz^5 + 2*T*Ux^5*Uz^3 + Ux^3*Uz*c^6 - Ux^7*Uz*c^2 - 2*T*Uz^5*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 2*T^2*Ux^3*Uz^3 + 2*Ux^3*Uz^3*c^4 + Ux^3*Uz^5*c^2 + 2*T*Ux*Uz^7 - 3*T*Uz^3*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^2*Uz*c^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^4*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T*Ux*Uz*c^6 + Ux^2*Uz^3*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T^2*Ux*Uz*c^4 + 3*T*Ux*Uz^5*c^2 - T*Ux^3*Uz*c^4 - T*Uz*c^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 3*T^2*Ux*Uz^3*c^2 + T^2*Ux^3*Uz*c^2 + 3*T*Ux^3*Uz^3*c^2 + 2*Ux^5*Uz*c^4*gamma^2 - Ux^3*Uz*c^6*gamma^4 - 2*T*Ux^2*Uz^3*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 3*T*Ux*Uz^3*c^4*gamma^2 - 2*T*Ux*Uz^5*c^2*gamma^2 - T*Ux^2*Uz*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 2*T*Ux^3*Uz^3*c^2*gamma^2 - Ux^2*Uz*c^4*gamma^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T*Ux*Uz*c^6*gamma^2)/(2*(Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uz^2 + T*c^2)*(2*T*Ux^4 + 4*T*Uz^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uz^4 - 2*Ux^4*Uz^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uz^2 + 6*T*Ux^2*c^2 + 8*T*Uz^2*c^2 - 6*Ux^2*Uz^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2)), -(Uz*(Uz^2 + c^2))/(2*T*Ux^4 + 4*T*Uz^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uz^4 - 2*Ux^4*Uz^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uz^2 + 6*T*Ux^2*c^2 + 8*T*Uz^2*c^2 - 6*Ux^2*Uz^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2), 0, -(Ux^3*Uz^6 - Ux^7*Uz^2 - T^2*Ux*Uz^4 - 5*T*Ux^3*Uz^4 - 2*T*Ux^5*Uz^2 + T*Uz^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T^2*Ux^3*Uz^2 + Ux^3*Uz^2*c^4 + 2*Ux^3*Uz^4*c^2 + Ux^2*Uz^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^4*Uz^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 3*T*Ux*Uz^6 + T*Uz^2*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 2*Ux^5*Uz^2*c^2*gamma^2 - Ux^3*Uz^2*c^4*gamma^4 + Ux^2*Uz^2*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 3*T*Ux*Uz^2*c^4 - 6*T*Ux*Uz^4*c^2 - T^2*Ux*Uz^2*c^2 - 5*T*Ux^3*Uz^2*c^2 + T*Ux^2*Uz^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux^2*Uz^2*c^2*gamma^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T*Ux*Uz^2*c^4*gamma^2 + T*Ux*Uz^4*c^2*gamma^2 + 2*T*Ux^3*Uz^2*c^2*gamma^2)/(2*(Uz^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uz^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uz^2 + T*c^2)*(2*T*Ux^4 + 4*T*Uz^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uz^4 - 2*Ux^4*Uz^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uz^2 + 6*T*Ux^2*c^2 + 8*T*Uz^2*c^2 - 6*Ux^2*Uz^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2))]];
    opt = "Uy Zero";
elseif abs(Uz) <= grid.tolerance && abs(Uy) >= grid.tolerance && abs(Ux) >= grid.tolerance

y*(2*T*Ux^2*Uy^2 - Ux^2*Uy^2*c^2 - Ux^4*c^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + 2*T*Uy^4 + 3*T*Uy^2*c^2 + T*c^4))/((Uy^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*cx^2*Uy^2 - Ux^2*Uy^2*c^2 - Ux^4*c^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + 2*T*Uy^4 + 3*T*Uy^2*c^2 + T*c^4)/((Uy^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*c^2)), 0];...
        [ (2*T^2*Ux*Uy^5 + 4*T*Ux^3*Uy^5 + 2*T*Ux^5*Uy^3 + Ux^3*Uy*c^6 - Ux^7*Uy*c^2 + 2*T*Uy^5*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 2*T^2*Ux^3*Uy^3 + 2*Ux^3*Uy^3*c^4 + Ux^3*Uy^5*c^2 + 2*T*Ux*Uy^7 + 3*T*Uy^3*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux^2*Uy*c^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux^4*Uy*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T*Ux*Uy*c^6 - Ux^2*Uy^3*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T^2*Ux*Uy*c^4 + 3*T*Ux*Uy^5*c^2 - T*Ux^3*Uy*c^4 + T*Uy*c^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 3*T^2*Ux*Uy^3*c^2 + T^2*Ux^3*Uy*c^2 + 3*T*Ux^3*Uy^3*c^2 + 2*Ux^5*Uy*c^4*gamma^2 - Ux^3*Uy*c^6*gamma^4 + 2*T*Ux^2*Uy^3*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 3*T*Ux*Uy^3*c^4*gamma^2 - 2*T*Ux*Uy^5*c^2*gamma^2 + T*Ux^2*Uy*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 2*T*Ux^3*Uy^3*c^2*gamma^2 + Ux^2*Uy*c^4*gamma^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T*Ux*Uy*c^6*gamma^2)/(2*(Uy^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*c^2)*(2*T*Ux^4 + 4*T*Uy^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uy^4 - 2*Ux^4*Uy^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*c^2 + 8*T*Uy^2*c^2 - 6*Ux^2*Uy^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2)),  (Uy*(Uy^2 + c^2))/(2*T*Ux^4 + 4*T*Uy^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uy^4 - 2*Ux^4*Uy^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*c^2 + 8*T*Uy^2*c^2 - 6*Ux^2*Uy^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2), -(Ux^7*Uy^2 - Ux^3*Uy^6 + T^2*Ux*Uy^4 + 5*T*Ux^3*Uy^4 + 2*T*Ux^5*Uy^2 + T*Uy^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T^2*Ux^3*Uy^2 - Ux^3*Uy^2*c^4 - 2*Ux^3*Uy^4*c^2 + Ux^2*Uy^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^4*Uy^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 3*T*Ux*Uy^6 + T*Uy^2*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 2*Ux^5*Uy^2*c^2*gamma^2 + Ux^3*Uy^2*c^4*gamma^4 + Ux^2*Uy^2*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 3*T*Ux*Uy^2*c^4 + 6*T*Ux*Uy^4*c^2 + T^2*Ux*Uy^2*c^2 + 5*T*Ux^3*Uy^2*c^2 + T*Ux^2*Uy^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux^2*Uy^2*c^2*gamma^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T*Ux*Uy^2*c^4*gamma^2 - T*Ux*Uy^4*c^2*gamma^2 - 2*T*Ux^3*Uy^2*c^2*gamma^2)/(2*(Uy^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*c^2)*(2*T*Ux^4 + 4*T*Uy^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uy^4 - 2*Ux^4*Uy^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*c^2 + 8*T*Uy^2*c^2 - 6*Ux^2*Uy^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2)), 0];...
        [-(2*T^2*Ux*Uy^5 + 4*T*Ux^3*Uy^5 + 2*T*Ux^5*Uy^3 + Ux^3*Uy*c^6 - Ux^7*Uy*c^2 - 2*T*Uy^5*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 2*T^2*Ux^3*Uy^3 + 2*Ux^3*Uy^3*c^4 + Ux^3*Uy^5*c^2 + 2*T*Ux*Uy^7 - 3*T*Uy^3*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^2*Uy*c^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^4*Uy*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T*Ux*Uy*c^6 + Ux^2*Uy^3*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T^2*Ux*Uy*c^4 + 3*T*Ux*Uy^5*c^2 - T*Ux^3*Uy*c^4 - T*Uy*c^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 3*T^2*Ux*Uy^3*c^2 + T^2*Ux^3*Uy*c^2 + 3*T*Ux^3*Uy^3*c^2 + 2*Ux^5*Uy*c^4*gamma^2 - Ux^3*Uy*c^6*gamma^4 - 2*T*Ux^2*Uy^3*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 3*T*Ux*Uy^3*c^4*gamma^2 - 2*T*Ux*Uy^5*c^2*gamma^2 - T*Ux^2*Uy*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 2*T*Ux^3*Uy^3*c^2*gamma^2 - Ux^2*Uy*c^4*gamma^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T*Ux*Uy*c^6*gamma^2)/(2*(Uy^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*c^2)*(2*T*Ux^4 + 4*T*Uy^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uy^4 - 2*Ux^4*Uy^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*c^2 + 8*T*Uy^2*c^2 - 6*Ux^2*Uy^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2)), -(Uy*(Uy^2 + c^2))/(2*T*Ux^4 + 4*T*Uy^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uy^4 - 2*Ux^4*Uy^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*c^2 + 8*T*Uy^2*c^2 - 6*Ux^2*Uy^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2), -(Ux^3*Uy^6 - Ux^7*Uy^2 - T^2*Ux*Uy^4 - 5*T*Ux^3*Uy^4 - 2*T*Ux^5*Uy^2 + T*Uy^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - T^2*Ux^3*Uy^2 + Ux^3*Uy^2*c^4 + 2*Ux^3*Uy^4*c^2 + Ux^2*Uy^4*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^4*Uy^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 3*T*Ux*Uy^6 + T*Uy^2*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + 2*Ux^5*Uy^2*c^2*gamma^2 - Ux^3*Uy^2*c^4*gamma^4 + Ux^2*Uy^2*c^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - 3*T*Ux*Uy^2*c^4 - 6*T*Ux*Uy^4*c^2 - T^2*Ux*Uy^2*c^2 - 5*T*Ux^3*Uy^2*c^2 + T*Ux^2*Uy^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux^2*Uy^2*c^2*gamma^2*(T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + T*Ux*Uy^2*c^4*gamma^2 + T*Ux*Uy^4*c^2*gamma^2 + 2*T*Ux^3*Uy^2*c^2*gamma^2)/(2*(Uy^2 + c^2)*(Ux^2*c^2*gamma^2 - Ux^2*Uy^2 - Ux^4 - Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*c^2)*(2*T*Ux^4 + 4*T*Uy^4 + 4*T*c^4 + Ux^6 + T^2*Ux^2 - 3*Ux^2*Uy^4 - 2*Ux^4*Uy^2 - 3*Ux^2*c^4 - 2*Ux^4*c^2 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*c^2 + 8*T*Uy^2*c^2 - 6*Ux^2*Uy^2*c^2 + 2*Ux^2*c^4*gamma^2 - 2*Ux^4*c^2*gamma^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 2*T*Ux^2*c^2*gamma^2)^(1/2)), 0]];
    opt = "Uz Zero";
elseif abs(Ux) <= grid.tolerance && abs(Uy) >= grid.tolerance && abs(Uz) <= grid.tolerance
    opt = "Ux Uz Zero";
    L = [ [ -(Uy*(Uy^2 + gamma^2*c^2))/(c^2*gamma^2),               0, (Uy^2 + gamma^2*c^2)/(c^2*gamma^2), 0];...
        [                                        0,               0,                                  0, 1];...
        [(Uy*(Uy^2 + gamma^2*c^2))/(2*c^2*gamma^2),  Uy/(2*T^(1/2)),              -Uy^2/(2*c^2*gamma^2), 0];...
        [(Uy*(Uy^2 + gamma^2*c^2))/(2*c^2*gamma^2), -Uy/(2*T^(1/2)),              -Uy^2/(2*c^2*gamma^2), 0] ];
elseif abs(Ux) <= grid.tolerance && abs(Uy) <= grid.tolerance && abs(Uz) <= grid.tolerance
    L = [[         0,   0, 1, 0];...
        [         0,   0, 0, 1];...
        [-T^(1/2)/2, 1/2, 0, 0];...
        [ T^(1/2)/2, 1/2, 0, 0]];
    opt = "All Zero";
else
    fprintf("Error, no R/L Selected!\n");
    pause(1000)
end
end


% Right eigenvectors (Matrix form)
function [R,opt] = right_eigenvector(Ux,Uy,Uz,  grid)
c = grid.c;
gamma = sqrt(1 + (Ux*Ux+Uy*Uy+Uz*Uz)/(c*c));
T = grid.temp;

% Select R:
if abs(Ux) > grid.tolerance && abs(Uy) > grid.tolerance && abs(Uz) > grid.tolerance
    R = [[(Uy*(Ux^4 + Ux^2*Uy^2 + Ux^2*Uz^2 - Ux^2*c^2*gamma^2 + Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*c^2))/(2*T*Ux^2*Uy^2 - Ux^2*Uy^2*c^2 - Ux^4*c^2 - Ux^2*Uz^2*c^2 + 2*T*Ux^2*Uz^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + 2*T*Uy^4 + 4*T*Uy^2*Uz^2 + 3*T*Uy^2*c^2 + 2*T*Uz^4 + 3*T*Uz^2*c^2 + T*c^4), (Uz*(Ux^4 + Ux^2*Uy^2 + Ux^2*Uz^2 - Ux^2*c^2*gamma^2 + Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*Uz^2 + T*c^2))/(2*T*Ux^2*Uy^2 - Ux^2*Uy^2*c^2 - Ux^4*c^2 - Ux^2*Uz^2*c^2 + 2*T*Ux^2*Uz^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + 2*T*Uy^4 + 4*T*Uy^2*Uz^2 + 3*T*Uy^2*c^2 + 2*T*Uz^4 + 3*T*Uz^2*c^2 + T*czz];...
        [                                                                             (2*T*Ux*Uy*c^2*gamma^2)/(2*T*Ux^2*Uy^2 - Ux^2*Uy^2*c^2 - Ux^4*c^2 - Ux^2*Uz^2*c^2 + 2*T*Ux^2*Uz^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + 2*T*Uy^4 + 4*T*Uy^2*Uz^2 + 3*T*Uy^2*c^2 + 2*T*Uz^4 + 3*T*Uz^2*c^2 + T*c^4),                                                                              (2*T*Ux*Uz*c^2*gamma^2)/(2*T*Ux^2*Uy^2 - Ux^2*Uy^2*c^2 - Ux^4*c^2 - Ux^2*Uz^2*c^2 + 2*T*Ux^2*Uz^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + 2*T*Uy^4 + 4*T*Uy^2*Uz^2 + 3*T*Uy^2*c^2 + 2*T*Uz^4 + 3*T*Uz^2*c^2 + T*c^4), (Ux*Uy^2 - T*Ux + Ux*Uz^2 + Ux*c^2 + (T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux^3 + Ux*c^2*gamma^2)/(2*Uz*(Uy^2 + Uz^2 + c^2)), (Ux*Uy^2 - T*Ux + Ux*Uz^2 + Ux*c^2 - (T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux^3 + Ux*c^2*gamma^2)/(2*Uz*(Uy^2 + Uz^2 + c^2))];...
y/Uzy/Uz];...

    opt = "None Zero";
elseif abs(Uy) <= grid.tolerance && abs(Uz) <= grid.tolerance && abs(Ux) >= grid.tolerance
    R = [[0, 0, (T*Ux - Ux*c^2 + Ux^3 + (T^2*Ux^2 + 2*T*Ux^4 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux*c^2*gamma^2)/(c^2*(- 2*Ux^2 + 2*T) + 4*T*Ux^2), -(Ux*c^2 - T*Ux - Ux^3 + (T^2*Ux^2 + 2*T*Ux^4 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux*c^2*gamma^2)/(c^2*(- 2*Ux^2 + 2*T) + 4*T*Ux^2)];...



    opt = "Uy Uz Zero";
elseif abs(Uy) <= grid.tolerance && abs(Uz) >= grid.tolerance && abs(Ux) >= grid.tolerance
    R = [[0, (Uz*(Ux^4 + Ux^2*Uz^2 - Ux^2*c^2*gamma^2 + Ux^2*c^2 + T*Ux^2 + T*Uz^2 + T*c^2))/(2*T*Ux^2*Uz^2 - Ux^2*Uz^2*c^2 - Ux^4*c^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + 2*T*Uz^4 + 3*T*Uz^2*c^2 + T*c^4),                                                                                                                                                                                                                                                                                                                                                                1/Uz,                                                                                                                                                                                                                                                                                                                                                                 1/Uz];...
        [0,                                                         (2*T*Ux*Uz*c^2*gamma^2)/(2*T*Ux^2*Uz^2 - Ux^2*Uz^2*c^2 - Ux^4*c^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + 2*T*Uz^4 + 3*T*Uz^2*c^2 + T*c^4), (Ux*Uz^2 - T*Ux + Ux*c^2 - Ux^3 + (T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux*c^2*gamma^2)/(2*Uz*(Uz^2 + c^2)), -(T*Ux - Ux*Uz^2 - Ux*c^2 + Ux^3 + (T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux*c^2*gamma^2)/(2*Uz*(Uz^2 + c^2))];...
        [1,                                                                                                                                                                                                       0,                                                                                                                                                                                                                                                                                                                                                                   0,                                                                                                                                                                                                                                                                                                                                                                    0];...

    opt = "Uy Zero";
elseif abs(Uz) <= grid.tolerance && abs(Uy) >= grid.tolerance && abs(Ux) >= grid.tolerance
    R = [[0, (Uy*(Ux^4 + Ux^2*Uy^2 - Ux^2*c^2*gamma^2 + Ux^2*c^2 + T*Ux^2 + T*Uy^2 + T*c^2))/(2*T*Ux^2*Uy^2 - Ux^2*Uy^2*c^2 - Ux^4*c^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + 2*T*Uy^4 + 3*T*Uy^2*c^2 + T*c^4),                                                                                                                                                                                                                                                                                                                                                                1/Uy,                                                                                                                                                                                                                                                                                                                                                                 1/Uy];...
        [0,                                                         (2*T*Ux*Uy*c^2*gamma^2)/(2*T*Ux^2*Uy^2 - Ux^2*Uy^2*c^2 - Ux^4*c^2 + Ux^2*c^4*gamma^2 - Ux^2*c^4 + T*Ux^2*c^2 + 2*T*Uy^4 + 3*T*Uy^2*c^2 + T*c^4), (Ux*Uy^2 - T*Ux + Ux*c^2 - Ux^3 + (T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux*c^2*gamma^2)/(2*Uy*(Uy^2 + c^2)), -(T*Ux - Ux*Uy^2 - Ux*c^2 + Ux^3 + (T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) - Ux*c^2*gamma^2)/(2*Uy*(Uy^2 + c^2))];...


    opt = "Uz Zero";
elseif abs(Ux) <= grid.tolerance && abs(Uy) >= grid.tolerance && abs(Uz) <= grid.tolerance
    opt = "Ux Uz Zero";
    R = [ [Uy/(Uy^2 + gamma^2*c^2), 0,       1/Uy,        1/Uy];...
        [                      0, 0, T^(1/2)/Uy, -T^(1/2)/Uy];...
        [                      1, 0,          1,           1];...
        [                      0, 1,          0,           0] ];
elseif abs(Ux) <= grid.tolerance && abs(Uy) <= grid.tolerance && abs(Uz) <= grid.tolerance
    R = [[0, 0, -1/T^(1/2), 1/T^(1/2)];...
        [0, 0,          1,         1];...
        [1, 0,          0,         0];...
        [0, 1,          0,         0]];
    opt = "All Zero";
else
    fprintf("Error, no R/L Selected!\n");
    pause(1000)
end

end

% Diagnol (Matrix form)
function [D] = diagnol_matrix(Ux,Uy,Uz,grid)
c = grid.c;
gamma = sqrt(1 + (Ux*Ux+Uy*Uy+Uz*Uz)/(c*c));
T = grid.temp;
D =  [[(Ux*(Ux^2 + Uy^2 + Uz^2 + c^2))/(c^2*gamma
    [                                            0, (Ux*(Ux^2 + Uy^2 + Uz^2 + c^2))/(c^2*gamma
    [                                            0,                                             0, (Ux*Uy^2 - T*Ux + Ux*Uz^2 + Ux*c^2 + (T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^3 + Ux*c^2*gamma^2)/(2*c^2*gamma
x*Uy^2 - T*Ux + Ux*Uz^2 + Ux*c^2 - (T^2*Ux^2 + 2*T*Ux^4 + 6*T*Ux^2*Uy^2 + 6*T*Ux^2*Uz^2 - 2*T*Ux^2*c^2*gamma^2 + 6*T*Ux^2*c^2 + 4*T*Uy^4 + 8*T*Uy^2*Uz^2 + 8*T*Uy^2*c^2 + 4*T*Uz^4 + 8*T*Uz^2*c^2 + 4*T*c^4 + Ux^6 - 2*Ux^4*Uy^2 - 2*Ux^4*Uz^2 - 2*Ux^4*c^2*gamma^2 - 2*Ux^4*c^2 - 3*Ux^2*Uy^4 - 6*Ux^2*Uy^2*Uz^2 + 2*Ux^2*Uy^2*c^2*gamma^2 - 6*Ux^2*Uy^2*c^2 - 3*Ux^2*Uz^4 + 2*Ux^2*Uz^2*c^2*gamma^2 - 6*Ux^2*Uz^2*c^2 + Ux^2*c^4*gamma^4 + 2*Ux^2*c^4*gamma^2 - 3*Ux^2*c^4)^(1/2) + Ux^3 + Ux*c^2*gamma^2)/(2*c^2*gamma^3)]];
end


% A_single (Matrix form)
function [A] = A_single(Ux,Uy,Uz,grid)
c = grid.c;
gamma = sqrt(1 + (Ux*Ux+Uy*Uy+Uz*Uz)/(c*c));
T = grid.temp;
A =  [ [                            (Ux*(Ux^2 + Uy^2 + Uz^2))/(c^2*gamma^3),                        (Uy^2 + Uz^2 + c^2)/(c^2*gamma^3),                 -(Ux*Uy)/(c^2*gamma^3),                 -(Ux*Uz)/(c^2*gamma^3)];...
    [(- Ux^2*c^2 + 2*T*Ux^2 + 2*T*Uy^2 + 2*T*Uz^2 + T*c^2)/(c^2*gamma^3), (Ux*(Uy^2 + Uz^2 + c^2*gamma^2 + c^2 - T))/(c^2*gamma^3),         -(Uy*(Ux^2 + T))/(c^2*gamma^3),         -(Uz*(Ux^2 + T))/(c^2*gamma^3)];...
    [                                                   -(Ux*Uy)/gamma^3,                   (Uy*(Uy^2 + Uz^2 + c^2))/(c^2*gamma^3), (Ux*(Ux^2 + Uz^2 + c^2))/(c^2*gamma^3),              -(Ux*Uy*Uz)/(c^2*gamma^3)];...
    [                                                   -(Ux*Uz)/gamma^3,                   (Uz*(Uy^2 + Uz^2 + c^2))/(c^2*gamma^3),              -(Ux*Uy*Uz)/(c^2*gamma^3), (Ux*(Ux^2 + Uy^2 + c^2))/(c^2*gamma^3)]];
end

function [W_plus, W_minus] = edges_linear(W_tilde,dW)
W_plus = W_tilde - dW/2;
W_minus = W_tilde + dW/2;
end


%Sup function
function [sup_val] = sup(values)
[maxB, index] = max(abs(values));
sup_val = maxB * sign(values(index));
end


%Check that X is real and isnotnan
function check(grid,X,str)

% Run only at select iterations:
if str == "R" || (mod ( grid.iter, grid.Output_interval ) == 0 || grid.iter == grid.NT)

    %Stop if isreal fails
    if (~isreal(X))
        fprintf("FAILS: Not-Real Soln.\n");
        fprintf("STR: %s\n",str);
        pause(1000)
    end

    %Stop if isnan fails
    if max(max((isnan(X))))
        fprintf("FAILS: Nan Soln.\n");
        fprintf("STR: %s\n",str);
        pause(1000)
    end

    %Stop if isfinite fails
    if min(min((isfinite(X)))) == 0
        fprintf("FAILS: Inf Soln.\n");
        fprintf("STR: %s\n",str);
        pause(1000)
    end

end
end